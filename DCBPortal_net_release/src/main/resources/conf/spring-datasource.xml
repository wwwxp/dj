<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
         http://www.springframework.org/schema/beans/spring-beans-4.0.xsd 
         http://www.springframework.org/schema/context 
         http://www.springframework.org/schema/context/spring-context-4.0.xsd 
         http://www.springframework.org/schema/tx 
         http://www.springframework.org/schema/tx/spring-tx-4.0.xsd 
         http://www.springframework.org/schema/aop 
         http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
         http://www.springframework.org/schema/mvc 
         http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd 
         http://www.springframework.org/schema/aop">


    <!--==========================数据源公共部分配置========================-->
    <bean id="abstractDataSource" init-method="init" destroy-method="close"
          class="com.alibaba.druid.pool.DruidDataSource" abstract="true">
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.initialSize}" />
        <property name="minIdle" value="${jdbc.minIdle}" />
        <property name="maxActive" value="${jdbc.maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc.maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
        
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <!--<property name="filters" value="stat" />-->
        
        <!-- 默认值是 true ，当从连接池取连接时，验证这个连接是否有效 -->
		<property name="testOnBorrow" value="false" />
        
        <!-- 默认值是 flase, 当从把该连接放回到连接池的时，验证这个连接是否有效 -->
		<property name="testOnReturn" value="false" />
        
        <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串 -->
        <property name="testWhileIdle" value="true" />
        
        <!-- 用来验证从连接池取出的连接,在将连接返回给调用者之前.如果指定,则查询必须是一个SQL SELECT并且必须返回至少一行记录-->
        <property name="validationQuery" value="SELECT 1"></property>
    </bean>
    <!--========================== END ========================-->




    <!--==========================数据源配置开始=============================-->
	<!-- 数据源配置 -->
	<bean id="defaultDataSource" init-method="init" destroy-method="close"
		class="com.alibaba.druid.pool.DruidDataSource" parent="abstractDataSource">
		<!-- 配置url、用户、密码 -->
		<property name="url" value="${jdbc.url}" />
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

	</bean>
	<!-- end -->

    <!-- default Datasource Mybaitis SessionFactory的注册 -->
    <bean id="defaultSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:conf/mybaits-cfg.xml"></property>
        <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
        <property name="dataSource" ref="defaultDataSource" />
    </bean>
 

    <!-- defaultDataSource 事务管理器 -->
    <bean name="defaultTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="defaultDataSource"></property>
    </bean>
    <!-- end -->

    <!--defaultDataSource 事务特性 -->
    <tx:advice id="defaultUserTxAdvice" transaction-manager="defaultTransactionManager">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="insert*" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="multiOperation" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="query*" propagation="SUPPORTS" />
            <tx:method name="find*" propagation="SUPPORTS" />
            <tx:method name="get*" propagation="SUPPORTS" />
            <tx:method name="select*" propagation="SUPPORTS" />
        </tx:attributes>
    </tx:advice>
    <!-- end -->

    <!--defaultDataSource aop事务控制，切入点配置 -->
    <aop:config>
        <aop:pointcut id="pc"
                      expression="execution(public * com.tydic.service..*(..))||execution(public * com.tydic.bp.core.service..*(..))" />
        <!--把事务控制在Service层-->
        <aop:advisor pointcut-ref="pc" advice-ref="defaultUserTxAdvice" />
    </aop:config>
    <!-- end -->

    <!--==========================数据源配置END=============================-->

 
 	<!--==========================DCA数据源配置开始(查询数据源，没有配置事务管理器)=============================-->
    <!-- 数据源配置 -->
    <bean id="ssoDataSource" init-method="init" destroy-method="close"
          class="com.alibaba.druid.pool.DruidDataSource" parent="abstractDataSource">
        <!-- 配置url、用户、密码 -->
        <property name="url" value="${jdbc.url_2}" />
        <property name="driverClassName" value="${jdbc.driverClassName_2}" />
        <property name="username" value="${jdbc.username_2}" />
        <property name="password" value="${jdbc.password_2}" />
    </bean>
    <!-- end -->

    <!-- dca Datasource Mybaitis SessionFactory的注册 -->
    <bean id="ssoSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:conf/mybaits-cfg.xml"></property>
        <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
        <property name="dataSource" ref="ssoDataSource" />
    </bean>
    <!--end-->
    <!--==========================数据源配置END=============================-->

    <!--============================多个数据源的配置使用多个sqlsessionFactory和多个JdbcTemplate 开始 =============-->
    <!-- 动态切换SqlSessionFactory  -->
    <bean id="sqlSessionDaoSupport" class="com.tydic.bp.core.utils.db.SqlSessionDaoSupport">
        <property name="targetSqlSessionFactorys">
            <map value-type="org.apache.ibatis.session.SqlSessionFactory">
                <entry key="defaultDataSource" value-ref="defaultSqlSessionFactory" />
                <entry key="ssoDataSource" value-ref="ssoSqlSessionFactory" />
            </map>
        </property>
        <property name="defaultTargetSqlSessionFactory" ref="defaultSqlSessionFactory" />
    </bean>
    
    <!-- 扩展添加数据源 -->
    <bean id="initDataSource" class="com.tydic.datasource.InitDataSourceServiceImpl" 
    	init-method="init" destroy-method="close" >
    	<property name="sqlSessionDaoSupport" ref="sqlSessionDaoSupport"></property>
    	<property name="configLocation" value="classpath:conf/mybaits-cfg.xml"></property>
        <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
    </bean>
</beans>