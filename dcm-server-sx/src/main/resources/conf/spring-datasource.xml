<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">


    <!--==========================数据源公共部分配置========================-->
    <bean id="abstractDataSource" init-method="init" destroy-method="close"
          class="com.alibaba.druid.pool.DruidDataSource" abstract="true">
        <!-- 配置初始化大小、最小、最大 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>
        <property name="initialSize" value="${jdbc.initialSize}"/>
        <property name="minIdle" value="${jdbc.minIdle}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/>
        <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
        <!--<property name="filters" value="stat" />-->
        <!-- 默认值是 true ，当从连接池取连接时，验证这个连接是否有效 -->
        <property name="testOnBorrow" value="true" />
        <!-- 默认值是 flase, 当从把该连接放回到连接池的时，验证这个连接是否有效 -->
        <property name="testOnReturn" value="false" />
        <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串 -->
        <property name="testWhileIdle" value="true" />

        <!-- 用来验证从连接池取出的连接,在将连接返回给调用者之前.如果指定,则查询必须是一个SQL SELECT并且必须返回至少一行记录-->
        <property name="validationQuery" value="SELECT 1"></property>

        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="20" />
    </bean>
    <!--========================== END ========================-->

    <!--==========================数据源配置开始=============================-->
    <!-- 数据源配置 -->
    <bean id="defaultDataSource" init-method="init" destroy-method="close"
          class="com.alibaba.druid.pool.DruidDataSource" parent="abstractDataSource">
        <!-- 配置url、用户、密码 -->
        <property name="url" value="${jdbc.url}"/>
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!-- end -->

    <!-- default Datasource Mybaitis SessionFactory的注册 -->
    <bean id="defaultSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:conf/mybaits-cfg.xml"></property>
        <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
        <property name="dataSource" ref="defaultDataSource"/>
    </bean>

    <!-- default Datasource jdbcTemplate的配置 ，不使用可以屏蔽掉-->
    <bean id="defaultJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="defaultDataSource"/>
    </bean>
    <!-- end -->

    <!--==========================数据源配置开始=============================-->
    <!-- 数据源配置 -->
    <bean id="anotherDataSource" init-method="init" destroy-method="close"
          class="com.alibaba.druid.pool.DruidDataSource" parent="abstractDataSource">
        <!-- 配置url、用户、密码 -->
        <property name="url" value="${jdbc.url_2}"/>
        <property name="driverClassName" value="${jdbc.driverClassName_2}"/>
        <property name="username" value="${jdbc.username_2}"/>
        <property name="password" value="${jdbc.password_2}"/>

        <!--第二个数据源为oracle时，则使用这个property，否则屏蔽掉-->
        <!--<property name="validationQuery" value="SELECT 1 FROM DUAL"></property>-->
    </bean>
    <!-- end -->

    <!-- another Datasource Mybaitis SessionFactory的注册 -->
    <bean id="anotherSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:conf/mybaits-cfg.xml"></property>
        <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
        <property name="dataSource" ref="anotherDataSource"/>
    </bean>
    <!--end-->

    <!-- another Datasource jdbcTemplate的配置，不使用可以屏蔽掉 -->
    <bean id="anotherJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="anotherDataSource"/>
    </bean>
    <!-- end -->


    <!--anotherDataSource 事务管理器，如果数据源不需要事务管理，则可以把事务管理器去掉 -->
    <bean name="anotherTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="anotherDataSource"></property>
    </bean>
    <!-- end -->

    <!--anotherDataSource 事务特性 如果数据源不需要事务，则可以去掉-->
    <tx:advice id="anotherUserTxAdvice" transaction-manager="anotherTransactionManager">
        <tx:attributes>
            <tx:method name="delete*" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="insert*" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="update*" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="multiOperation" propagation="REQUIRED"
                       read-only="false" rollback-for="java.lang.Exception"/>
            <tx:method name="query*" propagation="SUPPORTS"/>
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="get*" propagation="SUPPORTS"/>
            <tx:method name="select*" propagation="SUPPORTS"/>
        </tx:attributes>
    </tx:advice>
    <!-- end -->

    <!--anotherDataSource aop事务控制，切入点配置，如果数据源不需要事务，则可以去掉-->
    <aop:config>
        <aop:pointcut id="pc_another"
                      expression="execution(public * com.tydic.service..*(..))||execution(public * com.tydic.bp.core.service..*(..))"/>
        <!--把事务控制在Service层-->
        <aop:advisor pointcut-ref="pc_another" advice-ref="anotherUserTxAdvice"/>
    </aop:config>
    <!-- end -->
    <!--==========================数据源配置END=============================-->

    <!--==========================数据源配置开始(陕西BSS3.0需要3个数据源，数据库拆分了)=============================-->
    <!--<bean id="anotherDataSource3" init-method="init" destroy-method="close"
          class="com.alibaba.druid.pool.DruidDataSource" parent="abstractDataSource">
        <property name="url" value="${jdbc.url_3}"/>
        <property name="driverClassName" value="${jdbc.driverClassName_3}"/>
        <property name="username" value="${jdbc.username_3}"/>
        <property name="password" value="${jdbc.password_3}"/>
    </bean>
    <bean id="anotherSqlSessionFactory3" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:conf/mybaits-cfg.xml"></property>
        <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
        <property name="dataSource" ref="anotherDataSource3"/>
    </bean>
    <bean id="anotherJdbcTemplate3" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="anotherDataSource3"/>
    </bean>-->


    <!-- 动态切换SqlSessionFactory  -->
    <bean id="sqlSessionDaoSupport" class="com.tydic.bp.core.utils.db.SqlSessionDaoSupport">
        <property name="targetSqlSessionFactorys">
            <map value-type="org.apache.ibatis.session.SqlSessionFactory">
                <entry key="defaultDataSource" value-ref="defaultSqlSessionFactory"/>
                <entry key="anotherDataSource" value-ref="anotherSqlSessionFactory"/>
                <!--<entry key="anotherDataSource3" value-ref="anotherSqlSessionFactory3"/>-->
            </map>
        </property>
        <property name="defaultTargetSqlSessionFactory" ref="defaultSqlSessionFactory"/>
    </bean>

    <!-- 动态切换JdbcTempleate,如果不需要使用jdbcTemplate，则可以屏蔽掉 -->
    <bean id="jdbcDaoSupport" class="com.tydic.bp.core.utils.db.JdbcDaoSupport">
        <property name="targetJdbcFactorys">
            <map value-type="org.springframework.jdbc.core.JdbcTemplate">
                <entry key="defaultDataSource" value-ref="defaultJdbcTemplate"/>
                <entry key="anotherDataSource" value-ref="anotherJdbcTemplate"/>
                <!--<entry key="anotherDataSource3" value-ref="anotherJdbcTemplate3"/>-->
            </map>
        </property>
        <property name="defaultJdbcTemplate" ref="defaultJdbcTemplate"/>
    </bean>

    <!-- defaultDataSource 事务管理器 -->
    <bean name="defaultTransactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="defaultDataSource"></property>
    </bean>
    <!-- end -->
</beans>